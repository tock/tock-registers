use core::fmt;

use crate::{
    fields::{Field, TryFromValue},
    RegisterLongName, UIntLike,
};

/// `FieldDebug` is a debug helper trait that is implemented for Fields, and tuples of Fields.
///
/// This trait contain reference to the int type used on the field and the enum type its associated with.
///
/// This is auto used by [`register_bitfields!`], and don't need to be implemented manually.
///
/// [`register_bitfields!`]: crate::register_bitfields
pub trait FieldDebug<T: UIntLike, E> {
    /// Handles [`fmt::Debug`] value generation for a field.
    /// It will try to convert the data to the associated enum type, and if it fails, it will
    /// print the raw value as a number.
    fn debug_field(&self, data: T, a: &mut impl FnMut(&dyn fmt::Debug));
}

impl<T: UIntLike, R: RegisterLongName, E: TryFromValue<T, EnumType = E> + fmt::Debug>
    FieldDebug<T, E> for Field<T, R>
{
    fn debug_field(&self, data: T, f: &mut impl FnMut(&dyn fmt::Debug)) {
        let v = self.read(data);
        match E::try_from_value(v) {
            Some(v) => f(&v),
            None => f(&v),
        }
    }
}

macro_rules! impl_tuple {
    ($($enum:ident $field:ident),*) => {
        impl<T: UIntLike, $($enum),* , $($field: FieldDebug<T, $enum>),*> FieldDebug<T, ($($enum),*)> for ($($field),*) {
            fn debug_field(&self, data: T, f: &mut impl FnMut(&dyn fmt::Debug)) {
                #[allow(non_snake_case)]
                let ($($field),*) = self;
                $(
                    $field.debug_field(data, f);
                )*
            }
        }
    };
}

// Implement FieldDebug for tuples of fields
impl_tuple!(E1 F1, E2 F2);
impl_tuple!(E1 F1, E2 F2, E3 F3);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57, E58 F58);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57, E58 F58, E59 F59);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57, E58 F58, E59 F59, E60 F60);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57, E58 F58, E59 F59, E60 F60, E61 F61);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57, E58 F58, E59 F59, E60 F60, E61 F61, E62 F62);
impl_tuple!(E1 F1, E2 F2, E3 F3, E4 F4, E5 F5, E6 F6, E7 F7, E8 F8, E9 F9, E10 F10, E11 F11, E12 F12, E13 F13, E14 F14, E15 F15, E16 F16, E17 F17, E18 F18, E19 F19, E20 F20, E21 F21, E22 F22, E23 F23, E24 F24, E25 F25, E26 F26, E27 F27, E28 F28, E29 F29, E30 F30, E31 F31, E32 F32, E33 F33, E34 F34, E35 F35, E36 F36, E37 F37, E38 F38, E39 F39, E40 F40, E41 F41, E42 F42, E43 F43, E44 F44, E45 F45, E46 F46, E47 F47, E48 F48, E49 F49, E50 F50, E51 F51, E52 F52, E53 F53, E54 F54, E55 F55, E56 F56, E57 F57, E58 F58, E59 F59, E60 F60, E61 F61, E62 F62, E63 F63);

/// `RegisterDebugInfo` is a trait for types that can provide debug information for the `Register`.
///
/// It provide:
/// - The name of the Register since we don't store that anywhere else.
/// - The names of the fields in the register.
/// - The fields themselves, these are of type [`Field`].
pub trait RegisterDebugInfo<T: UIntLike> {
    /// A type containing a tuple of all the enum types used in the register in order
    type EnumTypes;

    /// The name of the register.
    fn name() -> &'static str;
    /// The names of the fields in the register.
    fn fields_names() -> &'static [&'static str];
    /// The fields themselves, these are of type [`Field`],
    /// these are returned as a tuple of fields.
    fn fields() -> impl FieldDebug<T, Self::EnumTypes>;
}

/// `RegisterDebugValue` is a container for the debug information and the value of the register
/// that we will read from and output the results.
///
/// The data is read once into this register and used for all the fields printing to avoid multiple reads
/// to hardware.
pub struct RegisterDebugValue<T: UIntLike, E: RegisterDebugInfo<T>> {
    pub(crate) data: T,
    pub(crate) _reg: core::marker::PhantomData<E>,
}

impl<T: UIntLike, E: RegisterDebugInfo<T>> fmt::Debug for RegisterDebugValue<T, E> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let mut debug_struct = f.debug_struct(E::name());
        let mut names = E::fields_names().iter();
        E::fields().debug_field(self.data, &mut |v| {
            debug_struct.field(names.next().unwrap(), &v);
        });
        debug_struct.finish()
    }
}
